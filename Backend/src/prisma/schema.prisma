generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Admin {
  id          String   @id @default(uuid())
  admin_id    String   @unique
  password    String
  contact     String?
  createdAt   DateTime @default(now())
  designation String
  name        String
  role        String
  updatedAt   DateTime @updatedAt
}

model UserNotification {
  id           String   @id @default(uuid()) @map("_id")
  user_id      String
  admin_id     String
  notification String
  related_to   String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  docLink      String?
  subtitle     String?
  admin_role   String
  isRead       Boolean  @default(false)
}

model Activity {
  id        String   @id @default(uuid()) @map("_id")
  user_id   String?
  admin_id  String?
  action    String
  subtitle  String?
  timestamp DateTime @default(now())
}

model User {
  id                    String                 @id @default(uuid()) @map("_id")
  user_id               String                 @unique
  password              String
  registration_no       String                 @unique
  company_name          String
  about                 String?                @db.Text
  createdAt             DateTime               @default(now())
  email                 String?
  facebook              String?
  founder_dp            String?
  founder_name          String?
  instagram             String?
  linkedin              String?
  logo                  String?
  mobile                String?
  moto                  String?
  registration_year     String?
  startup_since         String?
  twitter               String?
  updatedAt             DateTime               @updatedAt
  website               String?
  topStartup            Boolean                @default(false)
  category              String?
  coverPic              String?
  employeeCount         Int?
  projects              Int?
  revenueLY             Int?
  status                String?
  workOrders            Int?
  matchingLoanAmount    Int?                   @default(0)
  postSeedAmount        Int?                   @default(0)
  secondTrancheAmount   Int?                   @default(0)
  seedFundAmount        Int?                   @default(0)
  address               String?
  cin                   String?
  dateOfIncorporation   String?
  districtRoc           String?
  dpiitCert             String?  


  accelerationProgram   AccelerationProgram?
  document              Document?
  iprReimbursement      IPRReimbursement?
  incubationApplication IncubationApplication?
  matchingLoan          MatchingLoan?
  postSeedFund          PostSeedFund?
  qReports              QReport[]
  secondTranche         SecondTranche?
  seedFund              SeedFund?
  coWorking             CoWorking?

}

model Staff {
  id            String   @id @default(uuid()) @map("_id")
  name          String
  dp            String?
  qualification String
  designation   String
  display       Boolean  @default(true)
  rank          Int      @default(0)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  user_id       String
}

model Showcase {
  id          String   @id @default(uuid()) @map("_id")
  user_id     String
  title       String
  subtitle    String
  picUrl      String
  projectLink String?
  location    String?
  date        String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Document {
  id                     String   @id @default(uuid()) @map("_id")
  logoPath               String
  certPath               String?
  registrationNo         String   @unique
  founderName            String
  founderAadharNumber    String
  coFounderNames         String
  coFounderAadharNumbers String
  sector                 String
  businessConcept        String
  mobileNumbers          String
  email                  String
  websiteLink            String?
  category               String
  gender                 String
  dpiitRecognitionNo     String?
  appliedIPR             Boolean
  userId                 String   @unique
  documentStatus         String
  comment                String?
  createdAt              DateTime @default(now())
  updatedAt              DateTime @updatedAt
  user                   User     @relation(fields: [userId], references: [user_id])
}

model SeedFund {
  id                       String   @id @default(uuid()) @map("_id")
  companyName              String
  registrationNumber       String
  dateOfIncorporation      DateTime
  businessEntityType       String
  companyCertificate       String?
  rocDistrict              String
  companyAddress           String
  pincode                  String
  bankName                 String
  ifscCode                 String
  currentAccountNumber     String
  currentAccountHolderName String
  branchName               String
  branchAddress            String
  cancelChequeOrPassbook   String?
  panNumber                String
  gstNumber                String
  userId                   String   @unique
  documentStatus           String
  comment                  String?
  createdAt                DateTime @default(now())
  updatedAt                DateTime @updatedAt
  dpr                      String?
  inc33                    String?
  inc34                    String?
  partnershipAgreement     String?
  cinNumber                String?
  user                     User     @relation(fields: [userId], references: [user_id])
}

model SecondTranche {
  id                     String   @id @default(uuid()) @map("_id")
  utilizationCertificate String?
  statusReport           String?
  expenditurePlan        String?
  bankStatement          String?
  expenditureInvoice     String?
  geoTaggedPhotos        String?
  userId                 String   @unique
  documentStatus         String
  comment                String?
  createdAt              DateTime @default(now())
  updatedAt              DateTime @updatedAt
  user                   User     @relation(fields: [userId], references: [user_id])
}

model PostSeedFund {
  id                  String   @id @default(uuid()) @map("_id")
  currentStage        String
  technicalKnowledge  Boolean
  auditedBalanceSheet String?
  gstReturn           String?
  raisedFunds         Boolean
  employment          Boolean
  projectReport       String?
  file1               String?  
  file2               String?
  file3               String?
  file4               String?
  userId              String   @unique
  documentStatus      String
  comment             String?
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  user                User     @relation(fields: [userId], references: [user_id])
}

model QReport {
  id                   String   @id @default(uuid()) @map("_id")
  currentRevenue       String
  netProfitOrLoss      String
  workOrders           String
  userId               String
  documentStatus       String
  comment              String?
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
  aboutStartup         String
  auditedReport        String
  benefitsDetails      String?
  customersAcquired    String
  fullTimeFemale       String
  fullTimeMale         String
  fundAmount           String
  fundsDetails         String?
  fundsRaised          Boolean
  fundsTaken           String
  incubationBenefits   String
  iprReceived          String
  otherAchievements    String?
  partTimeFemale       String
  partTimeMale         String
  pitchdeck            String
  registeredBlock      String?
  registeredDistrict   String
  sector               String
  stage                String
  totalCoFounders      String
  totalWorkOrderAmount String?
  unitPhotos           String?
  user                 User     @relation(fields: [userId], references: [id])

  @@index([userId], map: "QReport_userId_fkey")
}

model AccelerationProgram {
  id                      String   @id @default(uuid()) @map("_id")
  hostInstitute           String
  programName             String
  startDate               DateTime
  endDate                 DateTime
  programWebsite          String?
  founderName             String
  coFounderName           String?
  participationFee        Float
  travelAccommodationCost Float
  totalPersons            Int
  totalFee                Float
  userId                  String   @unique
  documentStatus          String
  comment                 String?
  createdAt               DateTime @default(now())
  updatedAt               DateTime @updatedAt
  user                    User     @relation(fields: [userId], references: [user_id])
}

model MatchingLoan {
  id                      String   @id @default(uuid()) @map("_id")
  fundRaised              Float
  investorName            String
  matchingGrantAmount     Float
  proofOfInvestmentName   String?
  proofOfInvestmentPath   String?
  accountStatementName    String?
  accountStatementPath    String?
  investorUndertakingName String?
  investorUndertakingPath String?
  equityDilutionProofName String?
  equityDilutionProofPath String?
  utilizationPlanName     String?
  utilizationPlanPath     String?
  boardResolutionName     String?
  boardResolutionPath     String?
  userId                  String   @unique
  documentStatus          String
  comment                 String?
  createdAt               DateTime @default(now())
  updatedAt               DateTime @updatedAt
  user                    User     @relation(fields: [userId], references: [user_id])
}

model IncubationApplication {
  id             String   @id @default(uuid()) @map("_id")
  userId         String   @unique
  documentStatus String
  comment        String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  assignCenter   String?
  preference1    String
  preference2    String
  preference3    String
  user           User     @relation(fields: [userId], references: [user_id])
}

model CoWorkingApplication {
  id              String   @id @default(uuid()) @map("_id")
  coworkingCenter String
  seatNo          String
  status          String
  seatAddress     String?
  userId          String
  documentStatus  String
  comment         String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}
model CoWorking {
  id              String   @id @default(uuid()) @map("_id")
  coworkingCenter String
  seatNo          String
  status          String
  seatAddress     String?
  userId          String   @unique
  documentStatus  String
  comment         String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Define the one-to-one relation with User:
  user                     User     @relation(fields: [userId], references: [user_id])
}
model CoWorkingSeatMap {
  id              String   @id @default(uuid()) @map("_id")
  center          String   // coworkingCenter → center (optional cleanup)
  seatNo          String
  seatName        String?  // Optional: if you want names like "A-1", "Corner Seat"
  userId          String?  // nullable if seat not assigned yet
  seatType        String?  // e.g., Desk, Cabin, Conference
  status          String   // e.g., "Available", "Booked", "Inactive"
  comment         String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}


model IPRReimbursement {
  id                         String   @id @default(uuid()) @map("_id")
  iprType                    String
  iprCertificateFileName     String
  iprCertificateFilePath     String
  feePaidForApplicationForm  String
  feePaidInvoiceFileName     String
  feePaidInvoiceFilePath     String
  consultancyFee             String?
  consultancyInvoiceFileName String?
  consultancyInvoiceFilePath String?
  userId                     String   @unique
  documentStatus             String
  comment                    String?
  createdAt                  DateTime @default(now())
  updatedAt                  DateTime @updatedAt
  user                       User     @relation(fields: [userId], references: [user_id])
}
